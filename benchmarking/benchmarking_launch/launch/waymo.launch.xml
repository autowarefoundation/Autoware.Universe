<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <arg name="vehicle_param_file" default="$(find-pkg-share vehicle_info_util)/config/vehicle_info.param.yaml" description="path to the file of vehicle info yaml"/>
  <arg name="vehicle_model" default="sample_vehicle"/>
  <arg name="use_pointcloud_container" default="false" description="launch pointcloud container"/>
  <arg name="pointcloud_container_name" default="pointcloud_container"/>
  <arg name="use_concat_filter" default="true"/>
  <!-- common parameters -->
  <arg name="input/pointcloud" default="/sensing/lidar/concatenated/pointcloud" description="The topic will be used in the detection module"/>
  <arg name="mode" default="lidar" description="options: `camera_lidar_fusion`, `lidar` or `camera`"/>
  <arg name="image_raw0" default="/front_camera" description="image raw topic name"/>
  <arg name="camera_info0" default="/front_cam_info" description="camera info topic name"/>
  <arg name="image_raw1" default="/front_left_camera"/>
  <arg name="camera_info1" default="/front_left_cam_info"/>
  <arg name="image_raw2" default="/front_right_camera"/>
  <arg name="camera_info2" default="/front_right_cam_info"/>
  <arg name="image_raw3" default="/side_left_camera"/>
  <arg name="camera_info3" default="/side_left_cam_info"/>
  <arg name="image_raw4" default="/side_right_camera"/>
  <arg name="camera_info4" default="/side_right_cam_info"/>
  <arg name="image_number" default="1" description="choose image raw number(0-5)"/>
  <arg name="use_vector_map" default="false" description="use vector map in prediction"/>
  <arg name="use_pointcloud_map" default="false" description="use pointcloud map in detection"/>

  <!--   Global parameters -->
  <!--   Do not add "group" in order to propagate global parameters -->
  <include file="$(find-pkg-share global_parameter_loader)/launch/global_params.launch.py">
    <arg name="use_sim_time" value="false"/>
    <arg name="vehicle_model" value="$(var vehicle_model)"/>
  </include>
  <!--  &lt;!&ndash; Pointcloud container &ndash;&gt;-->
  <!--  <group>-->
  <!--    <include file="$(find-pkg-share benchmarking_launch)/launch/static_transforms.launch.py">-->

  <!--    </include>-->
  <!--  </group>-->

  <include file="$(find-pkg-share benchmarking_launch)/launch/pointcloud_container.launch.py">
    <arg name="base_frame" value="base_link"/>
    <!--    <arg name="use_intra_process" value="true"/>-->
    <!--    <arg name="use_multithread" value="true"/>-->
    <arg name="use_pointcloud_container" value="$(var use_pointcloud_container)"/>
    <arg name="container_name" value="$(var pointcloud_container_name)"/>
  </include>

  <group>
    <push-ros-namespace namespace="perception"/>
    <!--    Object segmentation module-->
    <group>
      <push-ros-namespace namespace="obstacle_segmentation"/>
      <include file="$(find-pkg-share benchmarking_launch)/launch/obstacle_segmentation/ground_segmentation/ground_segmentation.launch.py">
        <arg name="base_frame" value="base_link"/>
        <arg name="vehicle_param_file" value="$(var vehicle_param_file)"/>
        <arg name="use_intra_process" value="true"/>
        <arg name="use_multithread" value="true"/>
        <arg name="use_pointcloud_container" value="$(var use_pointcloud_container)"/>
        <arg name="container_name" value="$(var pointcloud_container_name)"/>
      </include>
    </group>

    <!--    Occupancy grid map module-->
    <group>
      <push-ros-namespace namespace="occupancy_grid_map"/>
      <include file="$(find-pkg-share benchmarking_launch)/launch/occupancy_grid_map/occupancy_grid_map.launch.py">
        <arg name="input/obstacle_pointcloud" value="/perception/obstacle_segmentation/single_frame/pointcloud_raw"/>
        <arg name="input/raw_pointcloud" value="/sensing/lidar/concatenated/pointcloud"/>
        <arg name="output" value="/perception/occupancy_grid_map/map"/>
        <arg name="use_intra_process" value="true"/>
        <arg name="use_multithread" value="true"/>
        <arg name="use_pointcloud_container" value="$(var use_pointcloud_container)"/>
        <arg name="container_name" value="$(var pointcloud_container_name)"/>
      </include>
    </group>

    <!-- object recognition module -->
    <group>
      <push-ros-namespace namespace="object_recognition"/>
      <!-- detection module -->
      <group>
        <push-ros-namespace namespace="detection"/>
        <include file="$(find-pkg-share benchmarking_launch)/launch/object_recognition/detection/detection.launch.xml">
          <arg name="input/pointcloud" value="$(var input/pointcloud)"/>
          <arg name="mode" value="$(var mode)"/>
          <arg name="image_raw0" value="$(var image_raw0)"/>
          <arg name="camera_info0" value="$(var camera_info0)"/>
          <arg name="image_raw1" value="$(var image_raw1)"/>
          <arg name="camera_info1" value="$(var camera_info1)"/>
          <arg name="image_raw2" value="$(var image_raw2)"/>
          <arg name="camera_info2" value="$(var camera_info2)"/>
          <arg name="image_raw3" value="$(var image_raw3)"/>
          <arg name="camera_info3" value="$(var camera_info3)"/>
          <arg name="image_raw4" value="$(var image_raw4)"/>
          <arg name="camera_info4" value="$(var camera_info4)"/>
          <arg name="image_number" value="$(var image_number)"/>
          <arg name="use_pointcloud_map" value="$(var use_pointcloud_map)"/>
        </include>
      </group>

      <!-- tracking module -->
      <group>
        <push-ros-namespace namespace="tracking"/>
        <include file="$(find-pkg-share benchmarking_launch)/launch/object_recognition/tracking/tracking.launch.xml"/>
      </group>
    </group>

    <!-- Tools -->
    <group>
      <!-- Rviz -->
      <node pkg="rviz2" exec="rviz2" name="rviz2" output="screen" args="-d $(find-pkg-share benchmarking_launch)/rviz/waymo.rviz"/>
    </group>
  </group>
</launch>
