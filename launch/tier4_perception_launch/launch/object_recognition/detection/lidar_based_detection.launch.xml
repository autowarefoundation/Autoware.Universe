<?xml version="1.0"?>
<launch>
  <!-- Interface parameters -->
  <arg name="output/objects" default="objects"/>

  <!-- LiDAR parameters -->
  <arg name="input/pointcloud"/>
  <arg name="input/obstacle_segmentation/pointcloud" default="/perception/obstacle_segmentation/pointcloud"/>
  <arg name="pointcloud_container_name" default="pointcloud_container"/>
  <arg name="use_pointcloud_container" default="false" description="use pointcloud container for detection preprocessor"/>

  <arg name="lidar_detection_model" default="centerpoint" description="options: `centerpoint`, `apollo`, `clustering`"/>
  <arg name="lidar_detection_score_threshold" default="0.35"/>

  <!-- LiDAR detector centerpoint parameters -->
  <arg name="centerpoint_model_name" default="centerpoint_tiny"/>
  <arg name="centerpoint_model_path" default="$(var data_path)/lidar_centerpoint"/>
  <arg name="lidar_model_param_path" default="$(find-pkg-share lidar_centerpoint)/config"/>

  <!-- Pointcloud filter -->
  <group>
    <include file="$(find-pkg-share tier4_perception_launch)/launch/object_recognition/detection/pointcloud_map_filter.launch.py">
      <arg name="input_topic" value="$(var input/obstacle_segmentation/pointcloud)"/>
      <arg name="output_topic" value="pointcloud_map_filtered/pointcloud"/>
      <arg name="use_intra_process" value="true"/>
      <arg name="use_multithread" value="true"/>
      <arg name="use_pointcloud_container" value="$(var use_pointcloud_container)"/>
      <arg name="pointcloud_container_name" value="$(var pointcloud_container_name)"/>
      <arg name="use_pointcloud_map" value="$(var use_pointcloud_map)"/>
    </include>
  </group>

  <!-- Clustering -->
  <group>
    <push-ros-namespace namespace="clustering"/>
    <group>
      <include file="$(find-pkg-share euclidean_cluster)/launch/voxel_grid_based_euclidean_cluster.launch.xml">
        <arg name="input_pointcloud" value="/perception/object_recognition/detection/pointcloud_map_filtered/pointcloud"/>
        <arg name="output_clusters" value="clusters"/>
        <arg name="use_low_height_cropbox" value="$(var use_low_height_cropbox)"/>
      </include>
    </group>

    <group>
      <include file="$(find-pkg-share shape_estimation)/launch/shape_estimation.launch.xml">
        <arg name="input/objects" value="clusters"/>
        <arg name="output/objects" value="objects_with_feature"/>
      </include>
    </group>

    <!-- convert DynamicObjectsWithFeatureArray to DynamicObjects -->
    <group>
      <include file="$(find-pkg-share detected_object_feature_remover)/launch/detected_object_feature_remover.launch.xml">
        <arg name="input" value="objects_with_feature"/>
        <arg name="output" value="objects"/>
      </include>
    </group>
  </group>

  <!-- DetectionByTracker -->
  <group if="$(var use_detection_by_tracker)">
    <push-ros-namespace namespace="detection_by_tracker"/>
    <include file="$(find-pkg-share detection_by_tracker)/launch/detection_by_tracker.launch.xml">
      <arg name="detection_by_tracker_param_path" value="$(var object_recognition_detection_detection_by_tracker_param)"/>
    </include>
  </group>

  <!-- CenterPoint -->
  <group if="$(eval &quot;'$(var lidar_detection_model)'=='centerpoint'&quot;)">
    <push-ros-namespace namespace="centerpoint"/>
    <group>
      <include file="$(find-pkg-share lidar_centerpoint)/launch/lidar_centerpoint.launch.xml">
        <arg name="input/pointcloud" value="$(var input/pointcloud)"/>
        <arg name="output/objects" value="objects"/>
        <arg name="score_threshold" value="$(var lidar_detection_score_threshold)"/>
        <arg name="model_name" value="$(var centerpoint_model_name)"/>
        <arg name="model_path" value="$(var centerpoint_model_path)"/>
        <arg name="model_param_path" value="$(var lidar_model_param_path)/$(var centerpoint_model_name).param.yaml"/>
        <arg name="class_remapper_param_path" value="$(var lidar_model_param_path)/detection_class_remapper.param.yaml"/>
      </include>
    </group>
  </group>

  <!-- Lidar Apollo Instance Segmentation -->
  <group if="$(eval &quot;'$(var lidar_detection_model)'=='apollo'&quot;)">
    <push-ros-namespace namespace="apollo"/>
    <group>
      <include file="$(find-pkg-share lidar_apollo_instance_segmentation)/launch/lidar_apollo_instance_segmentation.launch.xml">
        <arg name="input/pointcloud" value="$(var input/pointcloud)"/>
        <arg name="output/objects" value="labeled_clusters"/>
      </include>
    </group>

    <group>
      <include file="$(find-pkg-share shape_estimation)/launch/shape_estimation.launch.xml">
        <arg name="input/objects" value="labeled_clusters"/>
        <arg name="output/objects" value="objects_with_feature"/>
        <arg name="use_vehicle_reference_yaw" value="true"/>
        <arg name="use_vehicle_reference_shape_size" value="false"/>
      </include>
    </group>

    <!-- convert DynamicObjectsWithFeatureArray to DynamicObjects -->
    <group>
      <include file="$(find-pkg-share detected_object_feature_remover)/launch/detected_object_feature_remover.launch.xml">
        <arg name="input" value="objects_with_feature"/>
        <arg name="output" value="objects"/>
      </include>
    </group>
  </group>
</launch>
