<launch>
  <!-- emergency_handler -->
  <arg name="input_hazard_status" default="/system/emergency/hazard_status"/>
  <arg name="input_odometry" default="/localization/kinematic_state"/>
  <arg name="input_control_mode" default="/vehicle/status/control_mode"/>
  <arg name="output_mrm_state" default="/system/fail_safe/mrm_state"/>

  <arg name="config_file" default="$(find-pkg-share emergency_handler)/config/emergency_handler.param.yaml"/>

  <!-- emergency stop operator class-->
  <arg name="input_control_command" default="/control/command/control_cmd"/>
  <arg name="output_emergency_command" default="/system/emergency/control_cmd"/>
  <arg name="output_hazard" default="/system/emergency/hazard_lights_cmd"/>
  <arg name="output_gear" default="/system/emergency/gear_cmd"/>

  <!-- comfortable stop operator class -->
  <arg name="output_velocity_limit" default="/planning/scenario_planning/max_velocity_candidates"/>
  <arg name="output_velocity_limit_clear" default="/planning/scenario_planning/clear_velocity_limit"/>

  <!-- emergency_handler -->
  <node pkg="emergency_handler" exec="emergency_handler" name="emergency_handler" output="screen">
    <remap from="~/input/hazard_status" to="$(var input_hazard_status)"/>
    <remap from="~/input/odometry" to="$(var input_odometry)"/>
    <remap from="~/input/control_mode" to="$(var input_control_mode)"/>
    <remap from="~/output/mrm/state" to="$(var output_mrm_state)"/>

    <param from="$(var config_file)"/>

    <!-- emergency stop operator class -->
    <remap from="~/input/control/control_cmd" to="$(var input_control_command)"/>
    <remap from="~/output/mrm/emergency_stop/control_cmd" to="$(var output_emergency_command)"/>
    <remap from="~/output/gear" to="$(var output_gear)"/>
    <remap from="~/output/hazard" to="$(var output_hazard)"/>

    <!-- comfortable stop operator class -->
    <remap from="~/output/velocity_limit" to="$(var output_velocity_limit)"/>
    <remap from="~/output/velocity_limit/clear" to="$(var output_velocity_limit_clear)"/>
  </node>
</launch>
