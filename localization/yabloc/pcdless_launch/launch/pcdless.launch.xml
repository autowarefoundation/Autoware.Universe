<launch>
    <arg name="use_sim_time" default="true"/>

    <!-- source camera image topics -->
    <arg name="src_image" default="/sensing/camera/traffic_light/image_raw/compressed"/>
    <arg name="src_info" default="/sensing/camera/traffic_light/camera_info"/>
    <let name="resized_image" value="/sensing/camera/undistorted/image_raw"/>
    <let name="resized_info" value="/sensing/camera/undistorted/camera_info"/>
    

    <!-- flags to launch -->
    <arg name="mode" default="pekf" description="[pekf, ekf, pf]"/>
    <arg name="standalone" default="false" description="set false if it launches as multi pose estimator"/>

    <let name="launch_ekf" value="false"/>
    <let name="launch_ekf_corrector" value="false"/>
    <let name="launch_pf" value="false"/>
    <let name="connect_base_link_to_particle_pose" value="true" if="$(var standalone)"/>
    <let name="connect_base_link_to_particle_pose" value="false" unless="$(var standalone)"/>

    <let name="launch_ekf" value="true" if="$(eval &quot;'$(var mode)'=='pekf' or '$(var mode)'=='ekf'&quot;)"/>
    <let name="launch_ekf_corrector" value="true" if="$(eval &quot;'$(var mode)'=='ekf'&quot;)"/>
    <let name="launch_pf" value="true" if="$(eval &quot;'$(var mode)'=='pekf' or '$(var mode)'=='pf'&quot;)"/>

    <group>
        <push-ros-namespace namespace="localization"/>

        <!-- initializer -->
        <group>
            <push-ros-namespace namespace="initializer"/>
            <include file="$(find-pkg-share pcdless_launch)/launch/impl/initializer.launch.xml"/>
        </group>

        <!-- kalman filter-->
        <group if="$(var launch_ekf)">
            <include file="$(find-pkg-share pcdless_launch)/launch/impl/ekf.launch.xml"/>
        </group>

        <!-- pose estimator for ekf-->
        <group if="$(var launch_ekf_corrector)">
            <include file="$(find-pkg-share pcdless_launch)/launch/impl/ekf_corrector.launch.xml"/>
        </group>

        <!-- particle filter -->
        <group if="$(var launch_pf)">
            <push-ros-namespace namespace="pf"/>
            <include file="$(find-pkg-share pcdless_launch)/launch/impl/pf.launch.xml"/>
        </group>

        <!-- static tf -->
        <group if="$(var connect_base_link_to_particle_pose)"> 
            <node name="base_link_tf" pkg="tf2_ros" exec="static_transform_publisher" args="--frame-id /particle_filter --child-frame-id /base_link"/>
        </group>

        <!-- image processing -->
        <group>
            <push-ros-namespace namespace="imgproc"/>
            <include file="$(find-pkg-share pcdless_launch)/launch/impl/imgproc.launch.xml">
                <arg name="use_sim_time" value="$(var use_sim_time)" />
                <arg name="src_image" value="$(var src_image)"/>
                <arg name="src_info" value="$(var src_info)"/>
                <arg name="resized_image" value="$(var resized_image)"/>
                <arg name="resized_info" value="$(var resized_info)"/>
            </include>
        </group>

        <!-- twist -->
        <group>
            <push-ros-namespace namespace="twist"/>
            <include file="$(find-pkg-share pcdless_launch)/launch/impl/twist.launch.xml"/>
        </group>

        <let name="input_pose" value="/localization/pf/pose" if="$(var standalone)"/>
        <let name="input_pose" value="/localization/pose_twist_fusion_filter/pose" unless="$(var standalone)"/>

        <!-- validation -->
        <group>
            <push-ros-namespace namespace="validation"/>
            <include file="$(find-pkg-share pcdless_launch)/launch/impl/validation.launch.xml">
                <arg name="input_particle_pose" value="$(var input_pose)"/>
            </include>
        </group>

        <!-- map -->
        <group>
            <push-ros-namespace namespace="map"/>
            <include file="$(find-pkg-share pcdless_launch)/launch/impl/map.launch.xml">
                <arg name="input_particle_pose" value="$(var input_pose)"/>
            </include>
        </group>

    </group>
</launch>