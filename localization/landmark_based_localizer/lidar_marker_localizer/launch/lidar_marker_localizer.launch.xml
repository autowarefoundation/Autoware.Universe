<launch>
  <arg name="param_file" default="$(find-pkg-share lidar_marker_localizer)/config/lidar_marker_localizer.param.yaml"/>

  <!-- Topic names -->
  <arg name="input_lanelet2_map" default="~/input/lanelet2_map"/>
  <arg name="input_ekf_pose" default="~/input/ekf_pose"/>
  <arg name="input_pointcloud" default="~/input/pointcloud"/>

  <arg name="output_pose_with_covariance" default="~/output/pose_with_covariance"/>

  <arg name="service_trigger_node_srv" default="~/service/trigger_node_srv"/>

  <!-- container -->
  <arg name="use_pointcloud_container" default="True" description="launch pointcloud container"/>
  <arg name="pointcloud_container_name" default="/pointcloud_container" description="container name"/>

  <!-- option -->
  <arg name="use_intra_process" default="true" description="use ROS 2 component container communication"/>

  <group>
    <include file="$(find-pkg-share lidar_marker_localizer)/launch/util.launch.py">
      <arg name="input/pointcloud" value="$(var input_pointcloud)"/>
      <arg name="use_pointcloud_container" value="$(var use_pointcloud_container)"/>
      <arg name="pointcloud_container_name" value="$(var pointcloud_container_name)"/>
      <arg name="use_intra_process" value="$(var use_intra_process)"/>
    </include>
  </group>

  <node pkg="lidar_marker_localizer" exec="lidar_marker_localizer" name="lidar_marker_localizer" output="log">
    <remap from="~/input/pointcloud_ex" to="ring_filter/pointcloud_ex"/>
    <remap from="~/input/ekf_pose" to="$(var input_ekf_pose)"/>
    <remap from="~/input/lanelet2_map" to="$(var input_lanelet2_map)"/>

    <remap from="~/output/pose_with_covariance" to="$(var output_pose_with_covariance)"/>

    <remap from="~/service/trigger_node_srv" to="$(var service_trigger_node_srv)"/>

    <param from="$(var param_file)"/>
  </node>
</launch>
